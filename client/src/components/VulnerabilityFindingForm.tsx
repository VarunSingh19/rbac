import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { z } from "zod";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Plus, X, ExternalLink } from "lucide-react";

const vulnerabilityFindingSchema = z.object({
  vulnerabilityTitle: z.string().min(1, "Vulnerability title is required"),
  severity: z.enum(["Critical", "High", "Medium", "Low", "Info"]),
  impact: z.enum(["High", "Medium", "Low"]),
  likelihood: z.enum(["High", "Medium", "Low"]),
  category: z.string().optional(),
  vulnerabilityStatus: z.enum(["New", "Reopened", "Not Fixed", "Fixed"]).default("New"),
  numberOfOccurrences: z.number().min(1).default(1),
  description: z.string().optional(),
  proofOfConcept: z.string().optional(),
  recommendation: z.string().optional(),
  additionalNotes: z.string().optional(),
});

type VulnerabilityFindingFormData = z.infer<typeof vulnerabilityFindingSchema>;

interface VulnerabilityFinding {
  id: number;
  reportId: number;
  findingId: string;
  vulnerabilityTitle: string;
  severity: string;
  impact: string;
  likelihood: string;
  category: string;
  vulnerabilityStatus: string;
  numberOfOccurrences: number;
  affectedURLs: string[];
  description: string;
  proofOfConcept: string;
  recommendation: string;
  references: string[];
  additionalNotes: string;
  createdAt: string;
  updatedAt: string;
}

interface VulnerabilityFindingFormProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  reportId: number;
  finding?: VulnerabilityFinding | null;
}

export default function VulnerabilityFindingForm({
  open,
  onOpenChange,
  reportId,
  finding,
}: VulnerabilityFindingFormProps) {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [affectedURLs, setAffectedURLs] = useState<string[]>([]);
  const [newURL, setNewURL] = useState("");
  const [references, setReferences] = useState<string[]>([]);
  const [newReference, setNewReference] = useState("");

  const form = useForm<VulnerabilityFindingFormData>({
    resolver: zodResolver(vulnerabilityFindingSchema),
    defaultValues: {
      vulnerabilityTitle: "",
      severity: "Medium",
      impact: "Medium",
      likelihood: "Medium",
      category: "",
      vulnerabilityStatus: "New",
      numberOfOccurrences: 1,
      description: "",
      proofOfConcept: "",
      recommendation: "",
      additionalNotes: "",
    },
  });

  // Reset form when finding changes
  useEffect(() => {
    if (finding) {
      form.reset({
        vulnerabilityTitle: finding.vulnerabilityTitle,
        severity: finding.severity as any,
        impact: finding.impact as any,
        likelihood: finding.likelihood as any,
        category: finding.category || "",
        vulnerabilityStatus: finding.vulnerabilityStatus as any,
        numberOfOccurrences: finding.numberOfOccurrences,
        description: finding.description || "",
        proofOfConcept: finding.proofOfConcept || "",
        recommendation: finding.recommendation || "",
        additionalNotes: finding.additionalNotes || "",
      });
      setAffectedURLs(finding.affectedURLs || []);
      setReferences(finding.references || []);
    } else {
      form.reset();
      setAffectedURLs([]);
      setReferences([]);
    }
  }, [finding, form]);

  const createFindingMutation = useMutation({
    mutationFn: async (data: VulnerabilityFindingFormData) => {
      const payload = {
        ...data,
        affectedURLs,
        references,
      };
      
      const response = await apiRequest("POST", `/api/reports/${reportId}/findings`, payload);
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "Success",
        description: "Vulnerability finding created successfully",
      });
      queryClient.invalidateQueries({ queryKey: ['/api/reports', reportId, 'findings'] });
      queryClient.invalidateQueries({ queryKey: ['/api/reports'] });
      onOpenChange(false);
      form.reset();
      setAffectedURLs([]);
      setReferences([]);
    },
    onError: () => {
      toast({
        title: "Error",
        description: "Failed to create vulnerability finding",
        variant: "destructive",
      });
    },
  });

  const updateFindingMutation = useMutation({
    mutationFn: async (data: VulnerabilityFindingFormData) => {
      const payload = {
        ...data,
        affectedURLs,
        references,
      };
      
      const response = await apiRequest("PATCH", `/api/findings/${finding?.id}`, payload);
      return response.json();
    },
    onSuccess: () => {
      toast({
        title: "Success",
        description: "Vulnerability finding updated successfully",
      });
      queryClient.invalidateQueries({ queryKey: ['/api/reports', reportId, 'findings'] });
      queryClient.invalidateQueries({ queryKey: ['/api/reports'] });
      onOpenChange(false);
    },
    onError: () => {
      toast({
        title: "Error",
        description: "Failed to update vulnerability finding",
        variant: "destructive",
      });
    },
  });

  const onSubmit = (data: VulnerabilityFindingFormData) => {
    if (finding) {
      updateFindingMutation.mutate(data);
    } else {
      createFindingMutation.mutate(data);
    }
  };

  const addURL = () => {
    if (newURL && !affectedURLs.includes(newURL)) {
      setAffectedURLs([...affectedURLs, newURL]);
      setNewURL("");
    }
  };

  const removeURL = (url: string) => {
    setAffectedURLs(affectedURLs.filter(u => u !== url));
  };

  const addReference = () => {
    if (newReference && !references.includes(newReference)) {
      setReferences([...references, newReference]);
      setNewReference("");
    }
  };

  const removeReference = (ref: string) => {
    setReferences(references.filter(r => r !== ref));
  };

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical': return 'bg-red-500';
      case 'high': return 'bg-orange-500';
      case 'medium': return 'bg-yellow-500';
      case 'low': return 'bg-blue-500';
      case 'info': return 'bg-gray-500';
      default: return 'bg-gray-500';
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>
            {finding ? 'Edit Vulnerability Finding' : 'Add New Vulnerability Finding'}
          </DialogTitle>
          <DialogDescription>
            {finding ? 'Update the vulnerability finding details' : 'Document a new vulnerability finding with all relevant details'}
          </DialogDescription>
        </DialogHeader>
        
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <Tabs defaultValue="basic" className="w-full">
              <TabsList className="grid w-full grid-cols-3">
                <TabsTrigger value="basic">Basic Info</TabsTrigger>
                <TabsTrigger value="details">Details</TabsTrigger>
                <TabsTrigger value="references">URLs & References</TabsTrigger>
              </TabsList>

              <TabsContent value="basic" className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {/* Vulnerability Title */}
                  <FormField
                    control={form.control}
                    name="vulnerabilityTitle"
                    render={({ field }) => (
                      <FormItem className="col-span-2">
                        <FormLabel>Vulnerability Title</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., SQL Injection in Login Form" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  {/* Severity */}
                  <FormField
                    control={form.control}
                    name="severity"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Severity</FormLabel>
                        <Select onValueChange={field.onChange} value={field.value}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select severity" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="Critical">
                              <div className="flex items-center gap-2">
                                <div className="w-3 h-3 rounded-full bg-red-500"></div>
                                Critical
                              </div>
                            </SelectItem>
                            <SelectItem value="High">
                              <div className="flex items-center gap-2">
                                <div className="w-3 h-3 rounded-full bg-orange-500"></div>
                                High
                              </div>
                            </SelectItem>
                            <SelectItem value="Medium">
                              <div className="flex items-center gap-2">
                                <div className="w-3 h-3 rounded-full bg-yellow-500"></div>
                                Medium
                              </div>
                            </SelectItem>
                            <SelectItem value="Low">
                              <div className="flex items-center gap-2">
                                <div className="w-3 h-3 rounded-full bg-blue-500"></div>
                                Low
                              </div>
                            </SelectItem>
                            <SelectItem value="Info">
                              <div className="flex items-center gap-2">
                                <div className="w-3 h-3 rounded-full bg-gray-500"></div>
                                Info
                              </div>
                            </SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  {/* Impact */}
                  <FormField
                    control={form.control}
                    name="impact"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Impact</FormLabel>
                        <Select onValueChange={field.onChange} value={field.value}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select impact" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="High">High</SelectItem>
                            <SelectItem value="Medium">Medium</SelectItem>
                            <SelectItem value="Low">Low</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  {/* Likelihood */}
                  <FormField
                    control={form.control}
                    name="likelihood"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Likelihood</FormLabel>
                        <Select onValueChange={field.onChange} value={field.value}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select likelihood" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="High">High</SelectItem>
                            <SelectItem value="Medium">Medium</SelectItem>
                            <SelectItem value="Low">Low</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  {/* Category */}
                  <FormField
                    control={form.control}
                    name="category"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Category</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., OWASP A03, CWE-89" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  {/* Vulnerability Status */}
                  <FormField
                    control={form.control}
                    name="vulnerabilityStatus"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Vulnerability Status</FormLabel>
                        <Select onValueChange={field.onChange} value={field.value}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select status" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="New">New</SelectItem>
                            <SelectItem value="Reopened">Reopened</SelectItem>
                            <SelectItem value="Not Fixed">Not Fixed</SelectItem>
                            <SelectItem value="Fixed">Fixed</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  {/* Number of Occurrences */}
                  <FormField
                    control={form.control}
                    name="numberOfOccurrences"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Number of Occurrences</FormLabel>
                        <FormControl>
                          <Input 
                            type="number" 
                            min={1} 
                            {...field}
                            onChange={(e) => field.onChange(parseInt(e.target.value))}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                {/* Live preview */}
                <Card className="bg-gray-50">
                  <CardHeader>
                    <CardTitle className="text-sm">Preview</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="flex items-center gap-2 mb-2">
                      <Badge className={getSeverityColor(form.watch('severity'))}>
                        {form.watch('severity')}
                      </Badge>
                      <span className="font-medium">{form.watch('vulnerabilityTitle') || 'Vulnerability Title'}</span>
                    </div>
                    <div className="text-sm text-gray-600">
                      Impact: {form.watch('impact')} | Likelihood: {form.watch('likelihood')}
                      {form.watch('category') && ` | Category: ${form.watch('category')}`}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="details" className="space-y-4">
                {/* Description */}
                <FormField
                  control={form.control}
                  name="description"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Description</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="Technical explanation of the vulnerability..."
                          className="min-h-[100px]"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Proof of Concept */}
                <FormField
                  control={form.control}
                  name="proofOfConcept"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Proof of Concept</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="Steps to reproduce, code snippets, screenshots, etc..."
                          className="min-h-[100px]"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Recommendation */}
                <FormField
                  control={form.control}
                  name="recommendation"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Recommendation</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="Remediation steps and mitigation guidance..."
                          className="min-h-[100px]"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                {/* Additional Notes */}
                <FormField
                  control={form.control}
                  name="additionalNotes"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Additional Notes</FormLabel>
                      <FormControl>
                        <Textarea
                          placeholder="Any additional information or notes..."
                          className="min-h-[80px]"
                          {...field}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </TabsContent>

              <TabsContent value="references" className="space-y-4">
                {/* Affected URLs */}
                <div className="space-y-2">
                  <Label>Affected URLs</Label>
                  <div className="flex gap-2">
                    <Input
                      placeholder="https://example.com/vulnerable-page"
                      value={newURL}
                      onChange={(e) => setNewURL(e.target.value)}
                      onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addURL())}
                    />
                    <Button type="button" onClick={addURL} variant="outline">
                      <Plus className="w-4 h-4" />
                    </Button>
                  </div>
                  <div className="flex flex-wrap gap-2">
                    {affectedURLs.map((url, index) => (
                      <div key={index} className="flex items-center gap-1 bg-gray-100 px-2 py-1 rounded">
                        <ExternalLink className="w-3 h-3" />
                        <span className="text-sm">{url}</span>
                        <button
                          type="button"
                          onClick={() => removeURL(url)}
                          className="text-red-500 hover:text-red-700"
                        >
                          <X className="w-3 h-3" />
                        </button>
                      </div>
                    ))}
                  </div>
                </div>

                {/* References */}
                <div className="space-y-2">
                  <Label>References</Label>
                  <div className="flex gap-2">
                    <Input
                      placeholder="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-1234"
                      value={newReference}
                      onChange={(e) => setNewReference(e.target.value)}
                      onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addReference())}
                    />
                    <Button type="button" onClick={addReference} variant="outline">
                      <Plus className="w-4 h-4" />
                    </Button>
                  </div>
                  <div className="flex flex-wrap gap-2">
                    {references.map((ref, index) => (
                      <div key={index} className="flex items-center gap-1 bg-gray-100 px-2 py-1 rounded">
                        <ExternalLink className="w-3 h-3" />
                        <span className="text-sm">{ref}</span>
                        <button
                          type="button"
                          onClick={() => removeReference(ref)}
                          className="text-red-500 hover:text-red-700"
                        >
                          <X className="w-3 h-3" />
                        </button>
                      </div>
                    ))}
                  </div>
                </div>
              </TabsContent>
            </Tabs>

            <div className="flex justify-end gap-2">
              <Button type="button" variant="outline" onClick={() => onOpenChange(false)}>
                Cancel
              </Button>
              <Button 
                type="submit" 
                disabled={createFindingMutation.isPending || updateFindingMutation.isPending}
              >
                {finding ? 'Update Finding' : 'Add Finding'}
              </Button>
            </div>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}